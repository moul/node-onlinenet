// Generated by CoffeeScript 1.6.3
(function() {
  var request, url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  url = require('url');

  request = require('request');

  module.exports.ApiV1 = (function() {
    function ApiV1(opts) {
      var entity, key, _base, _base1, _base2, _base3, _i, _len, _ref;
      this.opts = opts != null ? opts : {};
      this.fetch = __bind(this.fetch, this);
      this.call = __bind(this.call, this);
      if ((_base = this.opts).enabledEntities == null) {
        _base.enabledEntities = ['loc', 'hw', 'server', 'abuse'];
      }
      if ((_base1 = this.opts).verbose == null) {
        _base1.verbose = false;
      }
      if ((_base2 = this.opts).url == null) {
        _base2.url = 'https://console.online.net/api/v1/';
      }
      if ((_base3 = this.opts).method == null) {
        _base3.method = 'GET';
      }
      _ref = this.opts.enabledEntities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        entity = require("./entities/" + key);
        this[key] = new entity(this);
      }
    }

    ApiV1.prototype.call = function(args, fn) {
      var _this = this;
      return this.fetch(args, function(err, data) {
        if (err) {
          return fn(err, data);
        }
        return fn(false, JSON.parse(data));
      });
    };

    ApiV1.prototype.fetch = function(opts, fn) {
      var callback, req,
        _this = this;
      if (typeof opts === 'string') {
        opts = {
          path: opts
        };
      }
      opts.uri = "" + this.opts.url + opts.path;
      opts.headers = {};
      opts.headers['Authorization'] = "Bearer " + this.opts.apiKey;
      opts.hostname = this.opts.hostname;
      if (this.opts.verbose) {
        opts.headers['X-Pretty-JSON'] = 1;
        console.info(opts);
      }
      callback = function(err, response, body) {
        if (err) {
          return fn(err, response, body);
        }
        switch (response.statusCode) {
          case 200:
            break;
          case 401:
            err = {
              "code": "AUTH REQUIRED"
            };
            break;
          default:
            err = {
              "code": "BADSTATUSCODE",
              "message": response.statusCode
            };
        }
        return fn(err, body);
      };
      return req = request(opts, callback);
    };

    return ApiV1;

  })();

}).call(this);
