// Generated by CoffeeScript 1.4.0
(function() {
  var request, url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  url = require('url');

  module.exports.ApiV1 = (function() {

    function ApiV1(opts) {
      var entity, k, key, v, _base, _base1, _base2, _base3, _base4, _base5, _base6, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this.opts = opts != null ? opts : {};
      this.fetch = __bind(this.fetch, this);

      this.call = __bind(this.call, this);

      if ((_ref = (_base = this.opts).enabledEntities) == null) {
        _base.enabledEntities = ['loc', 'hw'];
      }
      if ((_ref1 = (_base1 = this.opts).verbose) == null) {
        _base1.verbose = false;
      }
      if ((_ref2 = (_base2 = this.opts).url) == null) {
        _base2.url = 'http://console.online.net/api/v1/';
      }
      _ref3 = url.parse(this.opts.url);
      for (k in _ref3) {
        v = _ref3[k];
        if ((_ref4 = (_base3 = this.opts)[k]) == null) {
          _base3[k] = v;
        }
      }
      this.http = this.opts.protocol === 'https:' ? require('https') : require('http');
      if ((_ref5 = (_base4 = this.opts).basePath) == null) {
        _base4.basePath = this.opts.path;
      }
      if ((_ref6 = (_base5 = this.opts).method) == null) {
        _base5.method = 'GET';
      }
      if ((_ref7 = (_base6 = this.opts).port) == null) {
        _base6.port = 80;
      }
      delete this.opts.path;
      delete this.opts.url;
      delete this.opts.slashes;
      _ref8 = this.opts.enabledEntities;
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        key = _ref8[_i];
        entity = require("./entities/" + key);
        this[key] = new entity(this);
      }
    }

    ApiV1.prototype.call = function(args, fn) {
      var _this = this;
      return this.fetch(args, function(err, data) {
        if (err) {
          return fn(err, data);
        }
        return fn(false, JSON.parse(data));
      });
    };

    ApiV1.prototype.fetch = function(args, fn) {
      var k, req, v, _ref, _ref1;
      if (typeof args === 'string') {
        args = {
          path: args
        };
      }
      _ref = this.opts;
      for (k in _ref) {
        v = _ref[k];
        if ((_ref1 = args[k]) == null) {
          args[k] = v;
        }
      }
      args.pathSuffix = args.path;
      args.path = "" + args.basePath + args.pathSuffix;
      args['auth'] = "" + this.opts.apiKey + ":";
      req = this.http.request(args);
      req.on('error', function(err) {
        return fn(err, {});
      });
      req.on('response', function(response) {
        var buffer;
        buffer = '';
        response.on('data', function(chunk) {
          return buffer += chunk;
        });
        return response.on('end', function() {
          switch (response.statusCode) {
            case 401:
              return fn({
                "code": "AUTH REQUIRED"
              }, buffer);
            case 200:
              if (fn) {
                return fn(null, buffer);
              }
              break;
            default:
              return fn({
                "code": "BADSTATUSCODE",
                "message": response.statusCode
              }, buffer);
          }
        });
      });
      return req.end();
    };

    return ApiV1;

  })();

}).call(this);
