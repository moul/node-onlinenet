// Generated by CoffeeScript 1.5.0
(function() {
  var BaseBot, OnlineBot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseBot = require("./BaseBot");

  OnlineBot = (function(_super) {

    __extends(OnlineBot, _super);

    function OnlineBot() {
      this.servers = __bind(this.servers, this);
      this.getServerStats = __bind(this.getServerStats, this);
      this.getServersList = __bind(this.getServersList, this);
      this.getLastActivity = __bind(this.getLastActivity, this);
      this.auth = __bind(this.auth, this);
      this.init = __bind(this.init, this);
      this.handleOptions = __bind(this.handleOptions, this);
      OnlineBot.__super__.constructor.apply(this, arguments);
    }

    OnlineBot.prototype.handleOptions = function() {
      var _base, _base1, _ref, _ref1;
      if ((_ref = (_base = this.options).base_url) == null) {
        _base.base_url = 'https://console.online.net/en/';
      }
      if ((_ref1 = (_base1 = this.options).servers) == null) {
        _base1.servers = [];
      }
      return OnlineBot.__super__.handleOptions.apply(this, arguments);
    };

    OnlineBot.prototype.init = function() {
      this.authenticated = false;
      return OnlineBot.__super__.init.apply(this, arguments);
    };

    OnlineBot.prototype.auth = function(fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("auth()");
      return this.visit("login", function() {
        _this.browser.fill('_username', _this.options.username);
        _this.browser.fill('_password', _this.options.password);
        _this.browser.querySelector('form').submit(function() {
          return console.log('onsubmit');
        });
        return _this.browser.wait(function() {
          _this.debug("Signed in");
          _this.authenticated = true;
          if (fn) {
            return fn();
          }
        });
      });
    };

    OnlineBot.prototype.getLastActivity = function(fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("getLastActivity()");
      return this.visit("account/home", function() {
        var $, activity;
        $ = _this.getjQuery();
        activity = [];
        $('.content .box table:nth(0) tr td').each(function() {
          return activity.push($(this).html().trim().replace(/[\n\t]/g, ' ').replace(/\ \ */g, ' '));
        });
        _this.debug("Activity list: " + activity.length + " entries");
        return fn(activity);
      });
    };

    OnlineBot.prototype.getServersList = function(fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("getServersList()");
      return this.visit("server/list", function() {
        var $, server, servers;
        $ = _this.getjQuery();
        servers = [];
        $('tr').each(function() {
          var id, server;
          id = parseInt($(this).find('td:nth-child(2)').text().trim());
          if (id > 0) {
            server = {
              id: id,
              valid: !!$(this).find('td:nth-child(1) img').attr('src').match(/valid/),
              distrib: $(this).find('td:nth-child(3) img').attr('src').split('_')[1].split('.')[0],
              offer: $(this).find('td:nth-child(4)').text().trim(),
              ip: $(this).find('td:nth-child(5)').text().trim(),
              reverse: $(this).find('td:nth-child(6)').text().trim()
            };
            return servers.push(server);
          }
        });
        _this.options.servers = servers;
        _this.debug("Server list: " + ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = servers.length; _i < _len; _i++) {
            server = servers[_i];
            _results.push(server.id);
          }
          return _results;
        })()));
        if (fn) {
          return fn(_this.options.servers);
        }
      });
    };

    OnlineBot.prototype.getServerStats = function(server_id, fn) {
      var that,
        _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("getServerStats()");
      that = this;
      return this.visit("server/stats/" + server_id, function() {
        var $, current, stats;
        $ = _this.getjQuery();
        current = stats = {};
        $('.content .box').find('img, h3').each(function() {
          var elem, href, period, split, type, _ref;
          elem = $(this);
          if (elem.is('img')) {
            href = elem.attr('src');
            split = href.split('/')[3].split('-');
            _ref = split[split.length - 2].split('_'), period = _ref[0], type = _ref[1];
            if (split[0] === 'multi') {
              type = 'multi';
            }
            if (stats[type] == null) {
              stats[type] = {};
            }
            return stats[type][period] = href;
          }
        });
        if (fn) {
          return fn(stats);
        }
      });
    };

    OnlineBot.prototype.servers = function(fn) {
      var _ref;
      if ((_ref = this.options.servers) != null ? _ref.length : void 0) {
        return fn(this.options.servers);
      } else {
        return this.getServersList(fn);
      }
    };

    return OnlineBot;

  })(BaseBot);

  module.exports = OnlineBot;

}).call(this);
