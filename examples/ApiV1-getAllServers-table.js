// Generated by CoffeeScript 1.6.3
(function() {
  var ApiV1, Table, api, apiKey, async,
    _this = this;

  ApiV1 = require('..').ApiV1;

  apiKey = require('./credentials').apiKey;

  Table = require('cli-table');

  async = require('async');

  api = new ApiV1({
    apiKey: apiKey
  });

  api.server.getAllServers(function(err, servers) {
    var iterator, server, server_ids;
    if (err) {
      return console.error(err);
    }
    server_ids = [
      (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = servers.length; _i < _len; _i++) {
          server = servers[_i];
          _results.push(parseInt(server.$ref.split('/').slice(-1)[0]));
        }
        return _results;
      })()
    ][0];
    iterator = function(server_id, callback) {
      var _this = this;
      return api.server.getServerInfo(server_id, function(err, info) {
        return process.nextTick(function() {
          return callback(err, info);
        });
      });
    };
    return async.mapLimit(server_ids, 5, iterator, function(err, servers) {
      var table, _i, _len;
      table = new Table({
        style: {
          compact: true,
          head: ['red'],
          border: ['grey'],
          'padding-left': 1,
          'padding-right': 1
        },
        head: ['hostname', 'offer', 'os', 'support', 'proactive monitoring', 'location', 'boot mode', 'anti_ddos', 'power', 'last_reboot', 'hardware watch', 'ips']
      });
      for (_i = 0, _len = servers.length; _i < _len; _i++) {
        server = servers[_i];
        table.push([server.hostname, server.offer, server.os.name, server.support, server.proactive_monitoring, server.location.datacenter, server.boot_mode, server.anti_ddos, server.power, server.last_reboot, server.hardware_watch, server.ip.length]);
      }
      return console.log(table.toString());
    });
  });

}).call(this);
